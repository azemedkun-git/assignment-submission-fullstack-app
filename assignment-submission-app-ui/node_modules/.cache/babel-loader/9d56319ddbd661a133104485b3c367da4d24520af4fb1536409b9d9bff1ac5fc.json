{"ast":null,"code":"var _jsxFileName = \"E:\\\\FullStack React-Springboot\\\\AssignmentSubmissionApp\\\\assignment-submission-app-ui\\\\src\\\\AssignmentView\\\\index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AssignmentView = () => {\n  _s();\n  //const assignmentId = window.location.href.split(\"/assignments/\")[1]; //This can also work to get the path\n  const {\n    id\n  } = useParams();\n  const [assignment, setAssignment] = useState(null);\n  useEffect(() => {\n    fetch(\"api/assignments/id\", {\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: `Bearer ${jwt}`\n      },\n      method: \"POST\"\n    }).then(response => {\n      if (response.status === 200) return response.json();\n    }).then(assignment => {\n      window.location.href = `/assignments/${assignment.id}`;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" Assignment \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), assignment ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Status: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(AssignmentView, \"UB4clZ11EtWZ8ez0Vfz59f6+Y7Y=\", false, function () {\n  return [useParams];\n});\n_c = AssignmentView;\nvar _c;\n$RefreshReg$(_c, \"AssignmentView\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","AssignmentView","_s","id","assignment","setAssignment","fetch","headers","Authorization","jwt","method","then","response","status","json","window","location","href","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/FullStack React-Springboot/AssignmentSubmissionApp/assignment-submission-app-ui/src/AssignmentView/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport const AssignmentView = () => {\r\n  //const assignmentId = window.location.href.split(\"/assignments/\")[1]; //This can also work to get the path\r\n  const { id } = useParams();\r\n\r\n  const [assignment, setAssignment] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"api/assignments/id\", {\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        Authorization: `Bearer ${jwt}`,\r\n      },\r\n      method: \"POST\",\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200) return response.json();\r\n      })\r\n      .then((assignment) => {\r\n        window.location.href = `/assignments/${assignment.id}`;\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1> Assignment {id}</h1>\r\n      {assignment ? (\r\n        <>\r\n          <h2>Status: </h2>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAE1B,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAElDD,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,oBAAoB,EAAE;MAC1BC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASC,GAAI;MAC/B,CAAC;MACDC,MAAM,EAAE;IACV,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CACDH,IAAI,CAAEP,UAAU,IAAK;MACpBW,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAI,gBAAeb,UAAU,CAACD,EAAG,EAAC;IACxD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,GAAI,cAAY,EAACf,EAAE;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACxBlB,UAAU,gBACTN,OAAA,CAAAE,SAAA;MAAAkB,QAAA,eACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,gBACjB,CAAC,gBAEHxB,OAAA,CAAAE,SAAA,mBAAI,CACL;EAAA;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAlCWD,cAAc;EAAA,QAEVL,SAAS;AAAA;AAAA2B,EAAA,GAFbtB,cAAc;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}